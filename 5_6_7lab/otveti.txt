ответы на 5 лабу ООП

Что такое производный и базовый классы?
Производный класс это – класс который наследует все те же свойства, методы, поля, которые есть в базовом классе. Единственное, что не передается при наследова-нии, это конструкторы базового класса (тип доступа к производному классу должен быть таким же, как и у базового класса, или более строгим). Производный класс может иметь доступ только к тем членам базового класса, которые определены с модификато-рами public, internal, protected и protected internal.

Базовый класс это - обычный класс в котором содержатся поля, свойства и ме-тоды. В С# не поддерживается множественное наследование, класс может наследо-ваться только от одного класса. Хотя проблема множественного наследования реализу-ется с помощью концепции интерфейсов.

В чем заключена основная задача наследования?
Основная задача заключается в получении нового класса на основе существую-щего.

Пусть базовый класс содержит метод basefunc(), а производный класс не имеет метода с таким именем. Может ли объект производного класса иметь доступ к методу basefunc()? Если да, то при каких условиях?
Да, может, если метод имеет модификатор доступа public, internal, pro-tected и protected internal.

Доступ к членам базового класса во вложенном классе можно получить даже если эти базовые члены переопределены в производном классе, при помощи ключевого слова base.

Напишите объявление конструктора без аргументов для производного класса B, который будет вызывать конструктор без аргументов базового класса A.
public B : base()

{

//…

//...

}

Что такое полиморфизм? Приведите пример.
2 вариант

Class person

{

public virtual void Writing (string str)

{

Console.WriteLine (str + “this is overrided method”);

}

}

Class Employee : Person

{

public override void Writing (string str)

{

Console.WriteLine (str + “this is overrided method”);

}

}

Полиморфизм – это взаимозаменяемость объектов с одинаковыс интерфейсом. Полиморфизм-это один из столпов ооп, заключается он во фразе "один шаблон, множество реализаций" как пример, переопределение методов, свойств, полей, конструкторов

Методы и свойства которые мы хотим переопределить помечаются ключевым словом virtual. Они представляют полиморфный интерфейс. При переопределении в классе- наследниеке используется ключевое слово override

Определите назначение виртуальных функций.
Виртуальным называется такой метод, который объявляется как virtual в базо-вом классе. Виртуальный метод отличается тем, что он может быть переопределен в одном или нескольких производных классах. У каждого производного класса может быть свой вариант виртуального метода.

При их вызове по ссылке на базовый класс в C# определяется именно тот вариант виртуального метода, который следует вызывать, исходя из типа объекта, к которому происходит обращение по ссылке. Иными словами, вариант выполняемого виртуаль-ного метода выбирается по типу объекта, а не по типу ссылки на этот объект.

Кому доступны переменные с модификатором protected?
Любым классам-наследникам.

Наследуются ли переменные с модификатором private?
Да, но они не являются доступными.

As, is – что это, как применяется?
Ключевое слово AS служит для приведения объекта к указанному типу

В случае невозможности привести объект к указанному типу мы вместо ис-ключения получим null.

Ключевое слово IS позволяет сравнить объект и тип данных, чтобы опре-делить принадлежит ли наш объект этому типу. Возвращает данная конструкция либо true либо false.

Поддерживает ли C# множественное наследование?
Не поддерживает.

Можно ли запретить наследование от класса?
Да с помощью sealed.

Можно ли разрешить наследование класса, но запретить перекрытие метода?
Да, можно если в переопределяемом методе писать sealed override.

Что такое абстрактный класс?
Абстрактный класс – это такой же класс, как и обычный со своими полями, свой-ствами и методами. Но при определении методов используется ключевое слова abstract. А также нельзя использовать конструкторы абстрактного класса для создания объекта, следовательно, и объектов абстрактного класса быть не может.

В каком случае вы обязаны объявить класс абстрактным?
Если класс имеет хотя бы одно абстрактное свойство или метод он обязан быть определён как abstract.

В чем разница между абстрактными и виртуальными классами? Между вирту-альными и абстрактными методами?
НЕТУ ВИРТУАЛЬНЫХ КЛАССОВ

Виртуальный метод имеет реализацию и может быть переопределён в классе-наследнике. Абстрактный метод не имеет реализации, только описание и обязан быть реализован в производном классе.

Какие компоненты класса могут быть виртуальными?
Методы, свойства, индексаторы, события.

Что такое интерфейс?
Интерфейсы позволяют определить некоторый функционал не имеющие конкрет-ной реализации. Затем этот функционал реализуют классы, применяющие этот интер-

фейс. Интерфейсы так же, как и классы могут содержать свойства методы, события, ме-тоды, но без конкретной реализации. Все члены интерфейсов методы и свойства не имею модификаторов доступа, но фактически по умолчанию они имеют доступ public.

Как работать с объектом через унаследованный интерфейс?
Если есть несколько унаследованных интерфейсов, то при вызове методов интер-фейса необходимо явно указать реализацию какого метода мы хотим использовать (например, с помощью операции приведения типов).

Приведите пример явной реализации интерфейса.
Public interface IName

{

Void WriteName();

}

Public interface IFamily

{

Void WriteName();

}

Class UserInfo : IName, IFamily

{

Void IName.WriteName ()

{

Console.WriteLine(“Enter your name: ”);

}

Void IFamily.WriteName ()

{

Console.WriteLine(“Enter your surname: ”);

}

Почему нельзя указать модификатор видимости для методов интерфейса?
Все методы интерфейса должны быть реализованы в производном классе, для этого они (методы и свойства) все по умолчанию имеют модификатор public.

Можно ли наследовать от нескольких интерфейсов?
Можно

Назовите отличия между интерфейсом и абстрактным классом.
Если классы относятся к единой системе классификации – выбираем абстрактный класс, иначе выбираем интерфейс.

Если нужно чтобы все производные классы на всех уровнях наследования имели общую реализацию – абстрактный класс. Если необходимо определить функционал для группы разрозненных объектов, которые могут быть никак не связаны между собой (+ проектируем небольшой функциональный тип). Интерфейсы поддерживают «множе-ственное наследование», а абстрактные классы нет.

Если надо определить общий функционал для родственных объек-тов

Если нам надо определить функционал для группы разрозненных объектов, которые могут быть никак не связаны между собой.ии

Для чего используются стандартные интерфейсы ICloneable, IComparable, IComparer, lEnumerable?
для клонирования обьекта

для сравнения обьектов(2 параметра в методе)

3)тоже самое только другая форма

4)для структурированной коллекции и цикла for each

24-2

25 3,4

26 А и B

27 1

28 2

29 3

30 2

31 4 ( абстрактный класс нельзя создать обьект)

32 здесь нет ошибки

33 ошибка класс B реализует интерфейс но не переопределяет все его методы

ответы на 6 лабу ООП

Чем класс отличается от структуры?
Структура в C# является типом передающимся по значению, класс же является ссылочным типом.

В структуре создается объект значение, но не объект ссылки, структура не может наследоваться от классов, но может от интерфейса.

Что может и чего не может быть в структуре?
Структуру можно создавать без new, не может объявляться конструктор без параметров и не может инициализировать поля если они не const и static

Что такое перечисление? Приведите пример определения и использования перечисления
Перечисление-именованный проиндексированный список литералов

enum Winter_Month{

December,

January,

Febrary

}

Перечислите и поясните стандартные интерфейсы .Net?
Icomparable, Iclonable, Ienumeral

Для последовательного перебора элементов коллекции и цикла foreach

Как используется интерфейс IComparable?
Для сравнения элементов

Как используется интерфейс ICloneable?
Для клонирования элементов

Что такое полиморфизм? Перечислите его формы. Приведите примеры.
Полиморфизм – это взаимозаменяемость объектов с одинаковым интерфейсом. Полиморфизм-это один из столпов ооп, заключается он во фразе "один шаблон, множество реализаций" как пример, переопределение методов, свойств, полей, конструкторов

Методы и свойства которые мы хотим переопределить помечаются ключевым словом virtual. Они представляют полиморфный интерфейс. При переопределении в классе- наследнике используется ключевое слово override

Class person

{

public virtual void Writing (string str)

{

Console.WriteLine (str + “this is overrided method”);

}

}

Class Employee : Person

{

public override void Writing (string str)

{

Console.WriteLine (str + “this is overrided method”);

}

}

Зачем в классе определяют виртуальные методы?
Для их дальнейшего переопределения

Как сделать запрет переопределения методов?
Указатель для модификатора seale

ответы на 7 лабу ООП

1)Расскажите как генерируется исключение.

Обычно система сама генерирует исключения при определенных ситуациях, например, при делении числа на ноль. Но язык C# также позволяет генерировать исключения вручную с помощью оператора throw. То есть с помощью этого оператора мы сами можем создать исключение и вызвать его в процессе выполнения.

2)Расскажите методику обработки исключений.

Короче когда оно генерируется, система ищет ближайший подходящий блок catch. После этого обрабатывается блок finally (если он есть). Потом либо конец выполнения программы, либо, если это указано в блоке finally или catch, переходим на другой блок кода

3)Какое ключевое слово служит для обозначения блока кода, в котором можно

генерировать исключение?

Try { }

Какие ключевые слова используются для обработки и генерации исключений?
Расскажите об механизме обработке исключения?

Exception, try, catch, finally

Что будет, если в программе нет предложения catch, способного обработать
исключение?

Программа вылетит в ошибку

Что такое фильтры исключения? Приведите пример
Фильтры исключений позволяют обрабатывать исключения в зависимости от определенных условий. Для их применения после выражения catch идет выражение when, после которого в скобках указывается условие:

int x = 1;

int y = 0;

try

{

int result = x / y;

}

catch(DivideByZeroException) when (y==0 && x == 0)

{

Console.WriteLine("y не должен быть равен 0");

}

catch(DivideByZeroException ex)

{

Console.WriteLine(ex.Message);

}

Могут ли исключения быть вложенными?
Могут

Какой синтаксис нужно использовать в C# для отлова любого возможного
исключения?

Try{}

catch без параметров либо catch (Exception)

Чем следует руководствоваться при размещении обработчиков исключения?
Их иерархией, исключения, которые наследуются от других исключений, должны быть первыми, в самом конце следует ставить catch (Exception)

Что будет выведено на консоль в результате выполнения фрагмента листинга?
static void Main(string[] args)

{

string[] str = new string[5];

try

{

str[4] = "anything";

Console.WriteLine("It's OK");

}

catch (IndexOutOfRangeException e)

{

Console.WriteLine("IndexOutOfRangeException");

}

catch (Exception e)

{

Console.WriteLine("Exception");

}

}

}

Исключение не сгенирируется

Как повторно сгенерировать то же самое исключение в блоке обработчике catch?
Throw;

Какие методы содержаться в классе Exception? Где и как их можно использовать?
Свойство Message содержит символьную строку, описывающую характер ошибки;

Свойство StackTrace— строку с вызовами стека, приведшими к исключительной ситуации

ТагgetSite получает объект, обозначающий метод, сгенерировавший исключение.

Кроме того, в классе Exception определяется ряд методов. Чаще всего приходится пользоваться методомToString()